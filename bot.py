import os
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from flask import Flask
import threading

# Flask keep-alive
app = Flask(__name__)
@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

# --- API KEYS ---
BOT_TOKEN = os.environ.get("8173476361:AAFK7a0A_hw9lnYLWU4qrCYVkK5PiQgsGHE")
SHODAN_API_KEY = os.environ.get("7L1aiYw3vR65CdGfpgiy7bU3BDvJSqsW")
INTELX_API_KEY = os.environ.get("40a346fb-bb26-4780-a80f-0e669f37c331")

# --- COMMANDS ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ OSINT –ë–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã /ip, /email, /phone, /leak –∏ —Ç.–¥.")

async def ip_lookup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ IP: /ip 8.8.8.8")
        return
    ip = context.args[0]
    url = f"https://api.shodan.io/shodan/host/{ip}?key={SHODAN_API_KEY}"
    r = requests.get(url)
    if r.status_code == 200:
        data = r.json()
        reply = f"üåç IP: {ip}\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {data.get('org')}\n–ì–æ—Ä–æ–¥: {data.get('city')}\n–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {data.get('ports')}"
    else:
        reply = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
    await update.message.reply_text(reply)

async def email_lookup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ email: /email test@example.com")
        return
    email = context.args[0]
    headers = {
        "x-key": INTELX_API_KEY,
        "Content-Type": "application/json"
    }
    data = {
        "term": email,
        "maxresults": 1,
        "media": 0
    }
    r = requests.post("https://2.intelx.io/phonebook/search", headers=headers, json=data)
    if r.status_code == 200:
        res = r.json()
        total = res.get("selectors", [])
        reply = f"üîç Email –Ω–∞–π–¥–µ–Ω –≤ {len(total)} –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)."
    else:
        reply = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ email."
    await update.message.reply_text(reply)

async def phone_lookup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: /phone +79991234567")
        return
    phone = context.args[0]
    # –î–ª—è OSINT Industries –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –µ—Å—Ç—å API
    reply = f"üìû –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É: {phone}\n(–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    await update.message.reply_text(reply)

async def leak_lookup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ email –∏–ª–∏ username: /leak test@example.com")
        return
    term = context.args[0]
    headers = {
        "x-key": INTELX_API_KEY,
        "Content-Type": "application/json"
    }
    data = {
        "term": term,
        "maxresults": 5,
        "media": 0
    }
    r = requests.post("https://2.intelx.io/phonebook/search", headers=headers, json=data)
    if r.status_code == 200:
        reply = f"üïµÔ∏è –î–∞–Ω–Ω—ã–µ –æ {term} –Ω–∞–π–¥–µ–Ω—ã! –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —É—Ç–µ—á–∫–∞—Ö."
    else:
        reply = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(reply)

# --- MAIN ---
def main():
    app_tg = Application.builder().token(BOT_TOKEN).build()

    app_tg.add_handler(CommandHandler("start", start))
    app_tg.add_handler(CommandHandler("ip", ip_lookup))
    app_tg.add_handler(CommandHandler("email", email_lookup))
    app_tg.add_handler(CommandHandler("phone", phone_lookup))
    app_tg.add_handler(CommandHandler("leak", leak_lookup))

    threading.Thread(target=run_flask).start()  # Keep-alive thread
    app_tg.run_polling()

if __name__ == "__main__":
    main()

